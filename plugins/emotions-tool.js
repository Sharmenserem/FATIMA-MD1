// File: plugins/emoji-animations.js
const { cmd } = require('../command');
const fs = require('fs');
const path = require('path');

// Helper function to safely send animated messages
async function animateEmojis(conn, from, initialEmoji, emojiSequence, delay = 800) {
    try {
        const loadingMessage = await conn.sendMessage(from, { text: initialEmoji });
        
        for (const emoji of emojiSequence) {
            await new Promise(resolve => setTimeout(resolve, delay));
            try {
                await conn.relayMessage(
                    from,
                    {
                        protocolMessage: {
                            key: loadingMessage.key,
                            type: 14, // Edited message type
                            editedMessage: {
                                conversation: emoji,
                            },
                        },
                    },
                    {}
                );
            } catch (editError) {
                console.error('Edit error:', editError);
                // If editing fails, send as new message
                await conn.sendMessage(from, { text: emoji });
            }
        }
    } catch (e) {
        console.error('Animation error:', e);
        throw e;
    }
}

// Command configurations
const emojiCommands = [
    {
        pattern: "happy",
        desc: "Happy emoji animation",
        react: "üòä",
        emojis: ["üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "ü•π", "üòÖ", "üòÇ", "ü§£", "ü•≤", "‚ò∫Ô∏è", "üòä", "üòá"]
    },
    {
        pattern: "heart",
        desc: "Heart emoji animation",
        react: "‚ù§Ô∏è",
        emojis: ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "üñ§", "ü§ç", "ü§é", "üíî", "‚ù§Ô∏è‚Äçüî•", "‚ù§Ô∏è‚Äçü©π", "üíò", "üíù", "üíñ", "üíó", "üíì", "üíû", "üíï", "üíü"]
    },
    {
        pattern: "sad",
        desc: "Sad emoji animation",
        react: "üò¢",
        emojis: ["üòî", "üòü", "üôÅ", "‚òπÔ∏è", "üòï", "üòû", "üò¢", "üò•", "üò™", "üò≠", "üòø", "üíî"]
    },
    {
        pattern: "shy",
        desc: "Shy emoji animation",
        react: "üò≥",
        emojis: ["ü•∫", "üò≥", "üòä", "üòö", "üòô", "üòó", "üòò", "üòç", "ü§©", "ü•∞", "üòá", "üôà", "üôä"]
    },
    {
        pattern: "beautiful",
        desc: "Beautiful emoji animation",
        react: "‚ú®",
        emojis: ["‚ú®", "üåü", "üí´", "‚≠êÔ∏è", "üå†", "üåû", "üåù", "üåπ", "ü•Ä", "üå∫", "üå∏", "üåº", "üå∑"]
    },
    {
        pattern: "confused",
        desc: "Confused emoji animation",
        react: "ü§î",
        emojis: ["ü§î", "üòï", "üòü", "üôÅ", "üòÆ", "üòØ", "üò≤", "üò≥", "ü•¥", "üòµ", "üòµ‚Äçüí´", "üßê"]
    },
    {
        pattern: "moon",
        desc: "Moon phase animation",
        react: "üåö",
        emojis: ["üåë", "üåí", "üåì", "üåî", "üåï", "üåñ", "üåó", "üåò", "üåë", "üåô", "üåö", "üåõ", "üåú"]
    },
    {
        pattern: "kiss",
        desc: "Kiss emoji animation",
        react: "üíã",
        emojis: ["üíã", "üòò", "üòó", "üòô", "üòö", "ü•∞", "üòç", "ü§©", "‚ù§Ô∏è", "üíù", "üíò", "üíñ"]
    },
    {
        pattern: "hurt",
        desc: "Hurt emoji animation",
        react: "üíî",
        emojis: ["üíî", "üò£", "üòñ", "üò´", "üò©", "ü•∫", "üò¢", "üò≠", "üòø", "ü§ï", "ü•¥", "üòµ"]
    },
    {
        pattern: "broke",
        desc: "Broken heart animation",
        react: "üíî",
        emojis: ["üíî", "üñ§", "üíî", "üñ§", "üíî", "üñ§", "üíî", "üñ§", "üíî", "üñ§", "üíî"]
    },
    {
        pattern: "hot",
        desc: "Hot emoji animation",
        react: "üî•",
        emojis: ["üî•", "ü•µ", "‚ô®Ô∏è", "üå∂Ô∏è", "üß®", "üí•", "ü§Ø", "üëπ", "üí´", "‚ú®", "üåü", "‚≠êÔ∏è"]
    },
    {
        pattern: "luv",
        desc: "Love emoji animation",
        react: "ü•∞",
        emojis: ["‚ù§Ô∏è", "üß°", "üíõ", "üíö", "üíô", "üíú", "ü§é", "üñ§", "ü§ç", "üíñ", "üíó", "üíì", "üíû", "üíï", "üíò", "üíù", "üíü", "‚ù£Ô∏è", "üíå", "ü•∞"]
    }
];

// Register all commands
emojiCommands.forEach(cmdConfig => {
    cmd({
        pattern: cmdConfig.pattern,
        desc: cmdConfig.desc,
        category: "fun",
        react: cmdConfig.react,
        filename: __filename
    }, async (conn, mek, m, { from, reply }) => {
        try {
            await animateEmojis(conn, from, cmdConfig.emojis[0], cmdConfig.emojis);
        } catch (e) {
            console.error(`Error in ${cmdConfig.pattern}:`, e);
            reply(`‚ùå Failed to animate ${cmdConfig.pattern} emojis`);
        }
    });
});

// Save the plugin information
const pluginInfo = {
    name: "Emoji Animations",
    desc: "Auto-changing emoji animations for various emotions",
    version: "1.0",
    author: "Your Name"
};

fs.writeFileSync(
    path.join(__dirname, 'emoji-animations.json'),
    JSON.stringify(pluginInfo, null, 2)
);
